<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>keyboard_observer</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(KeyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(KeyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];

-(void)dealloc{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [IQKeyboardManager sharedManager].enable = NO;
}

- (void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    [IQKeyboardManager sharedManager].enable = YES;
}


#pragma mark - keyboardNotification

- (void)KeyboardWillShow:(NSNotification *)notification{
    NSDictionary *info = [notification userInfo];
    CGRect endFrame = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];
    CGFloat height = endFrame.size.height;
    
    &lt;#_keyboardViewTopCons#&gt;.constant = -(height + 45);
    &lt;#_keyboardViewBottomCons#&gt;.constant = -height;
    [self.view layoutIfNeeded];
}

- (void)KeyboardWillHide:(NSNotification *)notification{
    &lt;#_keyboardViewBottomCons#&gt;.constant = 0;
    &lt;#_keyboardViewTopCons#&gt;.constant = -45;
    [self.view layoutIfNeeded];
}

 - (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
     if ([text isEqualToString:@"\n"]){
         [self didPressSend:nil];
         return NO;
     }else{
         NSString *string;
         if (text.length &gt; 0) {
             string = [textView.text stringByReplacingCharactersInRange:range withString:text];
         }else{
             string = [textView.text substringToIndex:textView.text.length - range.length];
         }
         CGFloat height = [Tools boundingRectWithString:string font:textView.font size:CGSizeMake(textView.width - 10, MAXFLOAT)].height + 5;
         
         #if 0
         CGFloat newHeight = _keyboardViewBottomCons.constant - _keyboardViewTopCons.constant - height - textView.height;
         if (fabs(newHeight) &lt; 45) {
             _keyboardViewTopCons.constant = _keyboardViewBottomCons.constant - 45;
         }else if (fabs(newHeight) &gt; 120){
             _keyboardViewTopCons.constant = _keyboardViewBottomCons.constant - 120;
         }else{
             _keyboardViewTopCons.constant -= height - textView.height;
         }
         #else
         height = YY_CLAMP(fabs(height), 40, 120);
         _textView.heightConstraint.constant = height;
         self.heightConstraint.constant = height + 40;
         #endif
         [self layoutIfNeeded];
     }
     
     return YES;
 }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>9BAF89C2-90B5-4C09-937B-3B0A37A03929</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Generic</string>
	<key>IDECodeSnippetSummary</key>
	<string>键盘隐藏显示监听改变输入框位置</string>
	<key>IDECodeSnippetTitle</key>
	<string>keyboardObserver</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
